#!/usr/bin/env python3
"""
mivs
====
MInimal Versioning Software
"""

import argparse
import difflib
import glob
import shutil
import sys
import os

from yaml import load as yload
from yaml import Loader as yLoader


IGNORE = [".mivs"]

DIFF_FILE = ".mivs.diff"
PATCHED_FILE = ".mivs.patched"
PATCHED_DIR = "."
MIVS_DIR = ".mivs"
MIVS_CONF = "mivs.yaml"

# TODO finish keeping records
# TODO be able to jump around
# TODO merge with other mivs project

mivs_information = {
    "name": "main",
    "last_record": 0,
    "ignores": []
}

### Versioning
def create_diff(olddir : str, newdir : str, patch_file=DIFF_FILE, ignores=[]) -> bool:
    excludes = "-x " + " ".join(ignores) if ignores else ""
    os.system(f"diff {excludes} {olddir} {newdir} > {patch_file}")
    return True

def file_from_patches(base_dir : str, patches : list, patch_dir=PATCHED_FILE) -> bool:
    shutil.copy(basefile, patch_file)
    for patch in patches:
        os.system(f"patch {patch_file} < {patch}")
    return True

def apply_diff(diff_file, filename : str) -> bool:
    os.system(f"patch {filename} < {diff_file}")
    return True

### Mivs
def init() -> bool:
    if os.path.isdir(MIVS_DIR):
        return True
    
    # Make mivs
    print("Making mivs directory")
    os.mkdir(".mivs")

    print("Writing mivs.yaml")
    with open(".mivs/mivs.yaml", "w") as mivs_file:
        yaml.dump(mivs_information, mivs_file)

    # Copy files to the right directory
    os.mkdir(f".mivs/records")
    os.mkdir(f".mivs/records/0")
    copy_files("", ".mivs/records/0/", [".mivs"])
    copy_to_latest()
    
    return True

def read_mivs_yaml() -> bool:
    """
    Read and process the mivs yaml file.
    """
    global mivs_information
    conf_file = os.path.join(MIVS_DIR, MIVS_CONF)
    if os.path.isfile(conf_file):
        with open(conf_file, "r") as stream:
            mivs_information.update(yload(stream, Loader=yLoader))
            return True
    return False

def copy_to_latest():
    latest_dir = os.path.join(MIVS_DIR, "records/latest")
    shutil.rmtree(latest_dir)
    os.mkdir(latest_dir)
    copy_files("", latest_dir, [".mivs"])

def record(ignores=[]):
    """
    Record state of repo as a record.
    """
    create_diff(".mivs/records/latest", ".", ignores)

def copy_files(from_dir : str, to_dir : str, exceptions : list) -> bool:
    """
    Copy files recursively from one directory to another.
    """
    print("Copying files from", from_dir, "to", to_dir)
    search_dir = from_dir if from_dir != "" else "."
    for path in os.listdir(search_dir):
        if path in exceptions or path in [".", ".."]:
            continue
        print("Attempting to copy", path)
        full_path = os.path.join(from_dir, path)
        final_path = os.path.join(to_dir, path)
        if os.path.isfile(full_path):
            print("Copying", full_path, final_path)
            shutil.copyfile(full_path, final_path, follow_symlinks=False)
        elif os.path.isdir(full_path):
            print("Creating directory", full_path, final_path)
            os.mkdir(final_path)
            copy_files(full_path, final_path, exceptions)
        # TODO handle simlinks
    return True

def find_mivs_dir(limit=10, current_path=".") -> str:
    """
    Returns path to the mivs directory searching up.
    If path does not exists, False is returned.
    """
    if limit == 0:
        return False
    if MIVS_DIR in os.listdir():
        if os.path.isdir(MIVS_DIR):
            return current_path
    os.chdir("..")
    mivs_dir = find_mivs_dir(limit=limit-1, current_path=os.path.join(current_path, ".."))
    return mivs_dir

if __name__ == "__main__":
    # Parse arguments
    parser = argparse.ArgumentParser(
        description="MInimal Versioning Software"
    )
    parser.add_argument(
        "-i", "--init", action="store_true",
        help="Initialize mivs repository"
    )
    parser.add_argument(
        "-r", "--record", type=str,
        help="Record state of mivs repository with a comment"
    )
    parser.add_argument(
        "-j", "--jump", type=int,
        help="Jump to a record"
    )
    parser.add_argument(
        "-s", "--search", type=str,
        help="Search records for a comment"
    )
    args = parser.parse_args()
    
    # Move to mivs dir
    found_mivs_dir = False
    current_dir = os.getcwd()
    mivs_dir = find_mivs_dir()
    if mivs_dir or mivs_dir == "":
        found_mivs_dir = True
        os.chdir(mivs_dir)

    # Verify integrity of mivs directory
    if (mivs.record or mivs.search or mivs.jump) and not found_mivs_dir:
        print("Not a mivs repo")
        exit(1)
    read_mivs_yaml()
        
    if mivs.record:
        print("Recording current state")
        record()
        copy_to_latest()
    if mivs.search:
        print("mivs Search TODO")
    if mivs.jump:
        print("mivs Jump TODO")
    if mivs.init or (not mivs.record and not mivs.search and not mivs.jump):
        print("Initializing mivs")
        os.chdir(current_dir)
        init()
        copy_to_latest()
    
    # Reset path
    os.chdir(current_dir)
